buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'


repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
}

apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "br.uel.easymenu"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            try {
                storeFile file(EASYMENU_STORE_FILE)
                storePassword EASYMENU_STORE_PASSWORD
                keyAlias EASYMENU_KEY_ALIAS
                keyPassword EASYMENU_KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define these properties in ~/.gradle/gradle.properties.")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    buildOverlayUniversities(project)

    play {
        jsonFile = file('keys.json')
        uploadImages = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

def buildOverlayUniversities(project) {
    if (project.hasProperty("uni")) {
        def universities = []

        if (project.uni.equals("all")) {
            new File("src/overlay/universities").eachDir { dir ->
                universities << dir.getName()
            }
        } else {
            universities << project.uni
        }

        universities.each { name ->
            android {
                productFlavors {
                    "$name" {
                        applicationId "br.uel.easymenu.$name"
                    }
                    sourceSets[name].setRoot("src/overlay/universities/${name}")
                    copyUniversityFolderToSourceFolder(project, name)
                }
            }
        }
    }
}

def copyUniversityFolderToSourceFolder(project, name) {
    def flavorName = name.capitalize()
    def copyFolderName = "copyPlayFolder${flavorName}Release"
    def deleteFolderName = "deletePlayFolder${flavorName}Release"

    def copyPlayFolderTask = project.tasks.create(name: copyFolderName, type: Copy, overwrite: true) {
        from("src/overlay/universities/${name}/play") {
            include "**/*"
        }
        into "src/${name}/play"
    }

    def deletePlayFolderTask = project.tasks.create(name: deleteFolderName, type: Delete, overwrite: true) {
        delete "src/${name}"
    }

    afterEvaluate { projectEvaluation ->
        def uploadPlayResourcesRelease = projectEvaluation.tasks."publishListing${flavorName}Release"
        uploadPlayResourcesRelease.dependsOn copyPlayFolderTask
        uploadPlayResourcesRelease.finalizedBy deletePlayFolderTask
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.3'
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.google.dagger:dagger:2.2'
    provided 'com.google.dagger:dagger-compiler:2.2'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:recyclerview-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.bignerdranch.android:expandablerecyclerview:2.1.1'
    compile 'com.commonsware.cwac:wakeful:1.1.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'net.danlew:android.joda:2.9.3'
    compile('com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.0') {
        exclude module: 'joda-time'
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.robolectric:shadows-support-v4:3.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.samskivert:jmustache:1.12'

    androidTestCompile 'com.android.support:support-annotations:23.2.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.7.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile 'com.samskivert:jmustache:1.12'
}
